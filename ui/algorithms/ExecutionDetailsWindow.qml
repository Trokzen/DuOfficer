import QtQuick 6.5
import QtQuick.Controls 6.5
import QtQuick.Layouts 6.5
import QtQuick.Dialogs 6.5
import Qt.labs.qmlmodels 1.0

Window {
    id: executionDetailsWindow
    width: 1400
    height: 900
    minimumWidth: 1200
    minimumHeight: 700
    title: "–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞"

    // --- –°–≤–æ–π—Å—Ç–≤–∞ ---
    property int executionId: -1
    property var executionData: null

    // –î–æ—Å—Ç—É–ø–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã (—Å —É—á—ë—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤)
    property real availableTableWidth: width - 20 // 10px —Å–ª–µ–≤–∞ + 10px —Å–ø—Ä–∞–≤–∞

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (9 —Å—Ç–æ–ª–±—Ü–æ–≤)
    property var columnHeaders: [
        "–°—Ç–∞—Ç—É—Å",              // ‚Üê –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        "‚Ññ",
        "–û–ø–∏—Å–∞–Ω–∏–µ",
        "–ù–∞—á–∞–ª–æ",
        "–û–∫–æ–Ω—á–∞–Ω–∏–µ",
        "–¢–µ–ª–µ—Ñ–æ–Ω—ã",
        "–û—Ç—á—ë—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "–ö–æ–º—É –¥–æ–ª–æ–∂–µ–Ω–æ",
        "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"           // ‚Üê –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    ]

    // –ü—Ä–æ—Ü–µ–Ω—Ç—ã —à–∏—Ä–∏–Ω—ã (–≤ —Å—É–º–º–µ 100%)
    property var columnWidthPercents: [5, 3, 40, 6, 6, 8, 9, 8, 15]

    // --- –°–∏–≥–Ω–∞–ª—ã ---
    signal executionUpdated(int executionId)

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    function openFile(filePath) {
        print("try to open file:", filePath);
        if (filePath.startsWith("file://")) {
            if (Qt.openUrlExternally(filePath)) {
                console.log("–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç (URL):", filePath);
                return;
            }
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å URL:", filePath);
            return;
        }

        var normalizedPath = filePath.replace(/\\/g, "/");
        var url = "file:///" + normalizedPath;

        if (Qt.openUrlExternally(url)) {
            console.log("–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç:", filePath);
        } else {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ URL:", url);
        }
    }

    function executeAction(actionNumber) {
        var actionsList = appData.getActionExecutionsByExecutionId(executionId);
        if (!Array.isArray(actionsList) || actionNumber < 1 || actionNumber > actionsList.length) {
            showInfoMessage("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è");
            return;
        }

        var action = actionsList[actionNumber - 1];
        if (!action || !action.id) {
            showInfoMessage("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID");
            return;
        }

        if (typeof appData.executeActionExecution !== 'function') {
            showInfoMessage("–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            return;
        }

        try {
            appData.executeActionExecution(action.id);
            showInfoMessage("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ");
            loadExecutionData();
            executionUpdated(executionId);
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:", e);
            showInfoMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ");
        }
    }

    function mapStatusToText(status) {
        if (status === "completed") return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ";
        else if (status === "pending") return "–û–∂–∏–¥–∞–µ—Ç";
        else if (status === "in_progress") return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
        else if (status === "skipped") return "–ü—Ä–æ–ø—É—â–µ–Ω–æ";
        else return status;
    }

    function escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') return '';
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "<")
            .replace(/>/g, ">")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function formatDateTime(dateTimeStr) {
        if (!dateTimeStr) return "";
        var dt = new Date(dateTimeStr);
        if (isNaN(dt.getTime())) return dateTimeStr;
        var timeStr = Qt.formatDateTime(dt, "HH:mm");
        var dateStr = Qt.formatDateTime(dt, "dd.MM.yyyy");
        return timeStr + "\n" + dateStr;
    }

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    function loadExecutionData() {
        if (executionId <= 0) return;

        var execData = appData.getExecutionById(executionId);
        if (execData && execData.toVariant) execData = execData.toVariant();
        if (!execData || typeof execData !== 'object') {
            executionData = null;
            title = "–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—à–∏–±–∫–∞)";
            return;
        }
        executionData = execData;
        title = "–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + (executionData.snapshot_name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è");

        var actionsList = appData.getActionExecutionsByExecutionId(executionId);
        if (!Array.isArray(actionsList) && !(actionsList && actionsList.length !== undefined)) {
            actionsList = [];
        } else if (!Array.isArray(actionsList)) {
            var tmp = [];
            for (var i = 0; i < actionsList.length; i++) tmp.push(actionsList[i]);
            actionsList = tmp;
        }

        var jsRows = [];
        for (var i = 0; i < actionsList.length; i++) {
            var a = actionsList[i];
            var status = String(a.status || "unknown");
            var desc = String(a.snapshot_description || "");
            var phones = String(a.snapshot_contact_phones || "");
            var materials = String(a.snapshot_report_materials || "");
            var start = String(a.calculated_start_time || "");
            var end = String(a.calculated_end_time || "");
            var reported = String(a.reported_to || "");
            // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é

            // === –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" ===
            var executionHtml = "";
            if (status === "completed" && end) {
                executionHtml = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ<br/>" + formatDateTime(end);
            } else {
                executionHtml = '<a href="execute:' + (i + 1) + '">–í—ã–ø–æ–ª–Ω–∏—Ç—å</a>';
            }

            // === –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Ç—á—ë—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===
            var htmlMaterials = "";
            if (materials) {
                materials.split('\n').forEach(rawPath => {
                    var trimmedPath = rawPath.trim();
                    if (!trimmedPath) return;
                    var cleanPath = trimmedPath;
                    if (cleanPath.startsWith("file:///")) {
                        cleanPath = cleanPath.substring(8);
                    }
                    var fileName = cleanPath.split(/[\\/]/).pop();
                    htmlMaterials += `<a href="${cleanPath}">${escapeHtml(fileName)}</a><br/>`;
                });
            }

            jsRows.push({
                "–°—Ç–∞—Ç—É—Å": status,
                "‚Ññ": i + 1,
                "–û–ø–∏—Å–∞–Ω–∏–µ": desc,
                "–ù–∞—á–∞–ª–æ": formatDateTime(start),
                "–û–∫–æ–Ω—á–∞–Ω–∏–µ": formatDateTime(end),
                "–¢–µ–ª–µ—Ñ–æ–Ω—ã": phones,
                "–û—Ç—á—ë—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã": htmlMaterials,
                "–ö–æ–º—É –¥–æ–ª–æ–∂–µ–Ω–æ": reported,
                "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ": executionHtml  // ‚Üê –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            });
        }

        actionsTableModel.rows = jsRows;
    }

    // --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ---
    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 10
        spacing: 5

        // --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ ---
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 60
            color: "#2c3e50"
            border.color: "#34495e"
            Text {
                anchors.centerIn: parent
                text: executionData ? (executionData.snapshot_name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") + "\n" + (executionData.started_at || "–ù–µ –∑–∞–¥–∞–Ω–æ") : "–ó–∞–≥—Ä—É–∑–∫–∞..."
                color: "white"
                font.bold: true
                horizontalAlignment: Text.AlignHCenter
                verticalAlignment: Text.AlignVCenter
                wrapMode: Text.Wrap
            }
        }

        // --- –ö–Ω–æ–ø–∫–∏ ---
        RowLayout {
            Layout.fillWidth: true
            Layout.preferredHeight: 40
            spacing: 10
            Button { text: "–ì—Ä–∞—Ñ–∏–∫"; onClicked: showInfoMessage("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"); }
            Item { Layout.fillWidth: true }
            Button { text: "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"; onClicked: { /* ... */ } }
            Button { text: "–ê–≤—Ç–æ"; onClicked: { /* ... */ } }
            Button { text: "üñ® –ü–µ—á–∞—Ç—å"; onClicked: showInfoMessage("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"); }
            Button { text: "–ó–∞–∫—Ä—ã—Ç—å"; onClicked: close() }
        }

        // --- –¢–ê–ë–õ–ò–¶–ê –° –ó–ê–ì–û–õ–û–í–ö–ê–ú–ò ---
        ColumnLayout {
            Layout.fillWidth: true
            Layout.fillHeight: true
            spacing: 0

            // --- –†–£–ß–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò ---
            Row {
                Layout.fillWidth: true
                Layout.preferredHeight: 40
                width: availableTableWidth
                x: 10

                Repeater {
                    model: columnHeaders
                    Rectangle {
                        width: Math.max(20, availableTableWidth * columnWidthPercents[index] / 100)
                        height: 40
                        color: "#e0e0e0"
                        border.color: "#ccc"
                        border.width: 1
                        Text {
                            anchors.centerIn: parent
                            text: modelData
                            font.bold: true
                            elide: Text.ElideRight
                        }
                    }
                }
            }

            // --- –¢–ê–ë–õ–ò–¶–ê ---
            Item {
                Layout.fillWidth: true
                Layout.fillHeight: true

                TableView {
                    id: actionsTableView
                    anchors.fill: parent
                    model: actionsTableModel

                    rowHeightProvider: function(row) { return 100; }

                    columnWidthProvider: function(col) {
                        return Math.max(20, availableTableWidth * columnWidthPercents[col] / 100);
                    }

                    delegate: Rectangle {
                        implicitWidth: actionsTableView.columnWidthProvider(column)
                        implicitHeight: 100
                        color: row % 2 ? "#f9f9f9" : "#ffffff"
                        border.color: "#eee"

                        // –°—Ç–æ–ª–±–µ—Ü 0: –°—Ç–∞—Ç—É—Å + –ò–∫–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                        Item {
                            visible: column === 0
                            anchors.fill: parent
                            anchors.margins: 5

                            Text {
                                anchors.centerIn: parent
                                text: {
                                    var s = model.display;
                                    return s === "completed" ? "‚úÖ" :
                                        s === "skipped" ? "‚ùå" :
                                        s === "pending" ? "‚è∏" :
                                        s === "in_progress" ? "üîÑ" : "?";
                                }
                                font.pixelSize: 16
                                horizontalAlignment: Text.AlignHCenter
                                verticalAlignment: Text.AlignVCenter
                            }
                        }

                        // –°—Ç–æ–ª–±–µ—Ü 1: ‚Ññ
                        Text {
                            visible: column === 1
                            anchors.fill: parent
                            anchors.margins: 5
                            text: model.display || "N/A"
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }

                        // –°—Ç–æ–ª–±–µ—Ü 2: –û–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Å ToolTip
                        Item {
                            visible: column === 2
                            anchors.fill: parent
                            anchors.margins: 5

                            Text {
                                id: descText
                                anchors.fill: parent
                                text: model.display || ""
                                wrapMode: Text.WordWrap
                                horizontalAlignment: Text.AlignLeft
                                verticalAlignment: Text.AlignTop
                                elide: Text.ElideRight
                            }

                            ToolTip {
                                id: descTip
                                text: model.display || ""
                                visible: descText.truncated && hovered
                                delay: 500
                            }

                            MouseArea {
                                anchors.fill: parent
                                hoverEnabled: true
                                onEntered: descTip.open()
                                onExited: descTip.close()
                            }
                        }

                        // –°—Ç–æ–ª–±—Ü—ã 3‚Äì5, 7: —Ç–µ–∫—Å—Ç —Å ToolTip
                        Item {
                            visible: [3,4,5,7].indexOf(column) >= 0
                            anchors.fill: parent
                            anchors.margins: 5

                            Text {
                                id: textEl
                                anchors.fill: parent
                                text: model.display || (column === 3 || column === 4 ? "–ù–µ –∑–∞–¥–∞–Ω–æ" : "")
                                wrapMode: Text.Wrap
                                horizontalAlignment: Text.AlignHCenter
                                verticalAlignment: Text.AlignVCenter
                                elide: Text.ElideRight
                            }

                            ToolTip {
                                id: textTip
                                text: model.display || ""
                                visible: textEl.truncated && hovered
                                delay: 500
                            }

                            MouseArea {
                                anchors.fill: parent
                                hoverEnabled: true
                                onEntered: textTip.open()
                                onExited: textTip.close()
                            }
                        }

                        // –°—Ç–æ–ª–±–µ—Ü 6: –û—Ç—á—ë—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (HTML)
                        ScrollView {
                            visible: column === 6
                            anchors.fill: parent
                            anchors.margins: 2
                            clip: true
                            TextEdit {
                                id: reportText
                                textFormat: TextEdit.RichText
                                text: model.display || ""
                                readOnly: true
                                wrapMode: TextEdit.Wrap
                                onLinkActivated: executionDetailsWindow.openFile(link)

                                ToolTip {
                                    id: reportTip
                                    text: model.display.replace(/<[^>]*>/g, '') || ""
                                    visible: reportText.hovered && reportText.text.length > 50
                                    delay: 500
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    acceptedButtons: Qt.NoButton
                                    onEntered: reportTip.open()
                                    onExited: reportTip.close()
                                }
                            }
                        }

                        // –°—Ç–æ–ª–±–µ—Ü 8: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π
                        Item {
                            visible: column === 8
                            anchors.fill: parent
                            anchors.margins: 5

                            Button {
                                id: actionButton
                                anchors.centerIn: parent
                                text: model["–°—Ç–∞—Ç—É—Å"] === "completed" ? "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" : "‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å"
                                //icon.visible: false

                                font.pixelSize: 12
                                padding: 4
                                horizontalPadding: 8

                                onClicked: {
                                    if (model["–°—Ç–∞—Ç—É—Å"] === "completed") {
                                        var comp = Qt.createComponent("ActionExecutionEditorDialog.qml");
                                        if (comp.status === Component.Ready) {
                                            var dlg = comp.createObject(executionDetailsWindow, {
                                                executionId: executionId,
                                                currentActionExecutionId: model["‚Ññ"], // ‚Üê –∏–∑ model
                                                isEditMode: true
                                            });
                                            if (dlg) {
                                                dlg.onActionExecutionSaved.connect(() => {
                                                    loadExecutionData();
                                                    executionUpdated(executionId);
                                                });
                                                dlg.open();
                                            }
                                        }
                                    } else {
                                        executeAction(model["‚Ññ"]); // ‚Üê –∏–∑ model
                                    }
                                }
                            }

                            ToolTip {
                                text: model["–°—Ç–∞—Ç—É—Å"] === "completed" ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" : "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ"
                                visible: actionButton.hovered
                                delay: 500
                            }
                        }
                    }
                }
            }
        }

        // --- –ü–æ–¥–≤–∞–ª ---
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 40
            color: "#ecf0f1"
            border.color: "#bdc3c7"
            Text {
                anchors.centerIn: parent
                text: (appData.postName || "–ü–æ—Å—Ç") + ": " + (executionData ? executionData.created_by_user_display_name : "‚Äî")
                elide: Text.ElideRight
            }
        }
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---
    Popup {
        id: infoPopup
        x: (width - parent.width) / 2
        y: 50
        width: 300
        height: 100
        modal: false
        closePolicy: Popup.NoAutoClose
        parent: contentItem
        background: Rectangle { color: "lightyellow"; border.color: "orange"; radius: 5 }
        Text {
            id: infoText
            anchors.centerIn: parent
            anchors.margins: 10
            wrapMode: Text.Wrap
            horizontalAlignment: Text.AlignHCenter
        }
        Timer {
            id: infoTimer
            interval: 3000
            onTriggered: infoPopup.close()
        }
        function show(msg) {
            infoText.text = msg;
            open();
            infoTimer.start();
        }
    }
    function showInfoMessage(msg) { infoPopup.show(msg); }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    onExecutionIdChanged: { if (executionId > 0) loadExecutionData(); }
    Component.onCompleted: { if (executionId > 0) loadExecutionData(); }

    // --- –ú–æ–¥–µ–ª—å ---
    TableModel {
        id: actionsTableModel
        TableModelColumn { display: "–°—Ç–∞—Ç—É—Å" }
        TableModelColumn { display: "‚Ññ" }
        TableModelColumn { display: "–û–ø–∏—Å–∞–Ω–∏–µ" }
        TableModelColumn { display: "–ù–∞—á–∞–ª–æ" }
        TableModelColumn { display: "–û–∫–æ–Ω—á–∞–Ω–∏–µ" }
        TableModelColumn { display: "–¢–µ–ª–µ—Ñ–æ–Ω—ã" }
        TableModelColumn { display: "–û—Ç—á—ë—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã" }
        TableModelColumn { display: "–ö–æ–º—É –¥–æ–ª–æ–∂–µ–Ω–æ" }
        TableModelColumn { display: "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" }
    }
}