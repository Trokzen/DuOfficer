// ui/algorithms/ExecutionDetailsWindow.qml
import QtQuick 6.5
import QtQuick.Controls 6.5
import QtQuick.Layouts 6.5
import QtQuick.Dialogs 6.5
import Qt.labs.qmlmodels 1.0

Window {
    id: executionDetailsWindow
    width: 1400
    height: 900
    minimumWidth: 1200
    minimumHeight: 700
    title: "–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞"

    // --- –°–≤–æ–π—Å—Ç–≤–∞ ---
    property int executionId: -1
    property var executionData: null
    property var columnHeaders: [
        "–°—Ç–∞—Ç—É—Å", "‚Ññ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ù–∞—á–∞–ª–æ", "–û–∫–æ–Ω—á–∞–Ω–∏–µ",
        "–¢–µ–ª–µ—Ñ–æ–Ω—ã", "–û—Ç—á—ë—Ç", "–§–∞–∫—Ç", "–°—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç)",
        "–î–æ–ª–æ–∂–µ–Ω–æ", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "–î–µ–π—Å—Ç–≤–∏–µ"
    ]

    // --- –°–∏–≥–Ω–∞–ª—ã ---
    signal executionUpdated(int executionId)

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    function openFile(filePath) {
        if (Qt.openUrlExternally("file:///" + filePath)) {
            console.log("–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç:", filePath);
        } else {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª:", filePath);
        }
    }

    function mapStatusToText(status) {
        if (status === "completed") return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ";
        else if (status === "pending") return "–û–∂–∏–¥–∞–µ—Ç";
        else if (status === "in_progress") return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
        else if (status === "skipped") return "–ü—Ä–æ–ø—É—â–µ–Ω–æ";
        else return status;
    }

    function escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') return '';
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "<")
            .replace(/>/g, ">")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    function loadExecutionData() {
        if (executionId <= 0) return;

        var execData = appData.getExecutionById(executionId);
        if (execData && execData.toVariant) execData = execData.toVariant();
        if (!execData || typeof execData !== 'object') {
            executionData = null;
            title = "–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—à–∏–±–∫–∞)";
            return;
        }
        executionData = execData;
        title = "–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + (execData.snapshot_name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è");

        var actionsList = appData.getActionExecutionsByExecutionId(executionId);
        if (!Array.isArray(actionsList) && !(actionsList && actionsList.length !== undefined)) {
            actionsList = [];
        } else if (!Array.isArray(actionsList)) {
            var tmp = [];
            for (var i = 0; i < actionsList.length; i++) tmp.push(actionsList[i]);
            actionsList = tmp;
        }

        var jsRows = [];
        for (var i = 0; i < actionsList.length; i++) {
            var a = actionsList[i];
            var id = a.id || -1;
            var status = String(a.status || "unknown");
            var desc = String(a.snapshot_description || "");
            var phones = String(a.snapshot_contact_phones || "");
            var materials = String(a.snapshot_report_materials || "");
            var start = String(a.calculated_start_time || "");
            var end = String(a.calculated_end_time || "");
            var actual = String(a.actual_end_time || "");
            var reported = String(a.reported_to || "");
            var notes = String(a.notes || "");

            function fmt(dtStr) {
                if (!dtStr) return "";
                var d = new Date(dtStr);
                return isNaN(d) ? dtStr : d.toLocaleTimeString(Qt.locale(), "HH:mm") + "\n" + d.toLocaleDateString(Qt.locale(), "dd.MM");
            }

            var htmlMaterials = "";
            if (materials) {
                materials.split('\n').forEach(path => {
                    if (path = path.trim()) {
                        if (path.startsWith("file:///")) path = path.substring(8);
                        htmlMaterials += `<a href="${path}">${escapeHtml(path)}</a><br/>`;
                    }
                });
            }

            jsRows.push({
                "–°—Ç–∞—Ç—É—Å": status,
                "‚Ññ": id,
                "–û–ø–∏—Å–∞–Ω–∏–µ": desc,
                "–ù–∞—á–∞–ª–æ": fmt(start),
                "–û–∫–æ–Ω—á–∞–Ω–∏–µ": fmt(end),
                "–¢–µ–ª–µ—Ñ–æ–Ω—ã": phones,
                "–û—Ç—á—ë—Ç": htmlMaterials,
                "–§–∞–∫—Ç": fmt(actual),
                "–°—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç)": mapStatusToText(status),
                "–î–æ–ª–æ–∂–µ–Ω–æ": reported,
                "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è": notes,
                "–î–µ–π—Å—Ç–≤–∏–µ": ""
            });
        }

        actionsTableModel.rows = jsRows;
    }

    // --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ---
    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 10
        spacing: 5

        // --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ ---
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 60
            color: "#2c3e50"
            border.color: "#34495e"
            Text {
                anchors.centerIn: parent
                text: executionData ? (executionData.snapshot_name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") + "\n" + (executionData.started_at || "–ù–µ –∑–∞–¥–∞–Ω–æ") : "–ó–∞–≥—Ä—É–∑–∫–∞..."
                color: "white"
                font.bold: true
                horizontalAlignment: Text.AlignHCenter
                verticalAlignment: Text.AlignVCenter
                wrapMode: Text.Wrap
            }
        }

        // --- –ö–Ω–æ–ø–∫–∏ ---
        RowLayout {
            Layout.fillWidth: true
            Layout.preferredHeight: 40
            spacing: 10
            Button { text: "–ì—Ä–∞—Ñ–∏–∫"; onClicked: showInfoMessage("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"); }
            Item { Layout.fillWidth: true }
            Button { text: "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"; onClicked: { /* ... */ } }
            Button { text: "–ê–≤—Ç–æ"; onClicked: { /* ... */ } }
            Button { text: "–ü–µ—á–∞—Ç—å"; onClicked: showInfoMessage("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"); }
            Button { text: "–ó–∞–∫—Ä—ã—Ç—å"; onClicked: close() }
        }

        // --- –¢–ê–ë–õ–ò–¶–ê –° –ó–ê–ì–û–õ–û–í–ö–ê–ú–ò ---
        ColumnLayout {
            Layout.fillWidth: true
            Layout.fillHeight: true
            spacing: 0

            // --- –†–£–ß–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò ---
            RowLayout {
                Layout.fillWidth: true
                Layout.preferredHeight: 40
                Repeater {
                    model: columnHeaders
                    Rectangle {
                        Layout.fillWidth: true
                        color: "#e0e0e0"
                        border.color: "#ccc"
                        Text {
                            anchors.centerIn: parent
                            text: modelData
                            font.bold: true
                            elide: Text.ElideRight
                        }
                    }
                }
            }

            // --- –¢–ê–ë–õ–ò–¶–ê ---
            Item {
                Layout.fillWidth: true
                Layout.fillHeight: true

                TableView {
                    id: actionsTableView
                    anchors.fill: parent
                    model: actionsTableModel

                    rowHeightProvider: function(row) { return 100; }

                    columnWidthProvider: function(col) {
                        return width / columnHeaders.length;
                    }

                    delegate: Rectangle {
                        implicitWidth: actionsTableView.columnWidthProvider(column)
                        implicitHeight: 100
                        color: row % 2 ? "#f9f9f9" : "#ffffff"
                        border.color: "#eee"

                        // –°—Ç–æ–ª–±–µ—Ü 0: –°—Ç–∞—Ç—É—Å (–∏–∫–æ–Ω–∫–∞)
                        Text {
                            visible: column === 0
                            anchors.fill: parent
                            anchors.margins: 5
                            text: {
                                var s = model.display;
                                return s === "completed" ? "‚úÖ" :
                                       s === "skipped" ? "‚ùå" :
                                       s === "pending" ? "‚è∏" :
                                       s === "in_progress" ? "üîÑ" : "?";
                            }
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }

                        // –°—Ç–æ–ª–±–µ—Ü 1: ‚Ññ
                        Text {
                            visible: column === 1
                            anchors.fill: parent
                            anchors.margins: 5
                            text: model.display || "N/A"
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }

                        // –°—Ç–æ–ª–±–µ—Ü 2: –û–ø–∏—Å–∞–Ω–∏–µ
                        Text {
                            visible: column === 2
                            anchors.fill: parent
                            anchors.margins: 5
                            text: model.display || ""
                            wrapMode: Text.WordWrap
                            horizontalAlignment: Text.AlignLeft
                            verticalAlignment: Text.AlignTop
                        }

                        // –°—Ç–æ–ª–±—Ü—ã 3‚Äì5, 7‚Äì10: —Ç–µ–∫—Å—Ç
                        Text {
                            visible: [3,4,5,7,8,9,10].indexOf(column) >= 0
                            anchors.fill: parent
                            anchors.margins: 5
                            text: model.display || (column === 3 || column === 4 ? "–ù–µ –∑–∞–¥–∞–Ω–æ" : "")
                            wrapMode: Text.Wrap
                            horizontalAlignment: Text.AlignHCenter
                            verticalAlignment: Text.AlignVCenter
                        }

                        // –°—Ç–æ–ª–±–µ—Ü 6: –û—Ç—á—ë—Ç (HTML)
                        ScrollView {
                            visible: column === 6
                            anchors.fill: parent
                            anchors.margins: 2
                            clip: true
                            TextEdit {
                                textFormat: TextEdit.RichText
                                text: model.display || ""
                                readOnly: true
                                wrapMode: TextEdit.Wrap
                                onLinkActivated: executionDetailsWindow.openFile(link)
                            }
                        }

                        // –°—Ç–æ–ª–±–µ—Ü 11: –ö–Ω–æ–ø–∫–∞
                        Button {
                            visible: column === 11
                            anchors.centerIn: parent
                            text: {
                                var status = actionsTableModel.rows[row]["–°—Ç–∞—Ç—É—Å"];
                                return status === "completed" ? "–ò–∑–º–µ–Ω–∏—Ç—å" : "–í—ã–ø–æ–ª–Ω–∏—Ç—å";
                            }
                            onClicked: {
                                var id = actionsTableModel.rows[row]["‚Ññ"];
                                var comp = Qt.createComponent("ActionExecutionEditorDialog.qml");
                                if (comp.status === Component.Ready) {
                                    var dlg = comp.createObject(executionDetailsWindow, {
                                        executionId: executionId,
                                        currentActionExecutionId: id,
                                        isEditMode: true
                                    });
                                    if (dlg) {
                                        dlg.onActionExecutionSaved.connect(() => {
                                            loadExecutionData();
                                            executionUpdated(executionId);
                                        });
                                        dlg.open();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // --- –ü–æ–¥–≤–∞–ª ---
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 40
            color: "#ecf0f1"
            border.color: "#bdc3c7"
            Text {
                anchors.centerIn: parent
                text: (appData.postName || "–ü–æ—Å—Ç") + ": " + (executionData ? executionData.created_by_user_display_name : "‚Äî")
                elide: Text.ElideRight
            }
        }
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ---
    Popup {
        id: infoPopup
        x: (width - parent.width) / 2
        y: 50
        width: 300
        height: 100
        modal: false
        closePolicy: Popup.NoAutoClose
        parent: contentItem
        background: Rectangle { color: "lightyellow"; border.color: "orange"; radius: 5 }
        Text {
            anchors.centerIn: parent
            anchors.margins: 10
            wrapMode: Text.Wrap
            horizontalAlignment: Text.AlignHCenter
        }
        Timer {
            id: infoTimer
            interval: 3000
            onTriggered: infoPopup.close()
        }
        function show(msg) {
            infoText.text = msg;
            open();
            infoTimer.start();
        }
    }
    function showInfoMessage(msg) { infoPopup.show(msg); }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    onExecutionIdChanged: { if (executionId > 0) loadExecutionData(); }
    Component.onCompleted: { if (executionId > 0) loadExecutionData(); }

    // --- –ú–æ–¥–µ–ª—å ---
    TableModel {
        id: actionsTableModel
        TableModelColumn { display: "–°—Ç–∞—Ç—É—Å" }
        TableModelColumn { display: "‚Ññ" }
        TableModelColumn { display: "–û–ø–∏—Å–∞–Ω–∏–µ" }
        TableModelColumn { display: "–ù–∞—á–∞–ª–æ" }
        TableModelColumn { display: "–û–∫–æ–Ω—á–∞–Ω–∏–µ" }
        TableModelColumn { display: "–¢–µ–ª–µ—Ñ–æ–Ω—ã" }
        TableModelColumn { display: "–û—Ç—á—ë—Ç" }
        TableModelColumn { display: "–§–∞–∫—Ç" }
        TableModelColumn { display: "–°—Ç–∞—Ç—É—Å (—Ç–µ–∫—Å—Ç)" }
        TableModelColumn { display: "–î–æ–ª–æ–∂–µ–Ω–æ" }
        TableModelColumn { display: "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è" }
        TableModelColumn { display: "–î–µ–π—Å—Ç–≤–∏–µ" }
    }
}