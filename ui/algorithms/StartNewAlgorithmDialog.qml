// ui/algorithms/StartNewAlgorithmDialog.qml
import QtQuick 6.5
import QtQuick.Controls 6.5
import QtQuick.Layouts 6.5
// import QtQuick.Dialogs 6.5 // –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è MessageDialog

Popup {
    id: startNewAlgorithmDialog
    x: (parent.width - width) / 2
    y: (parent.height - height) / 2
    width: Math.min(parent.width * 0.8, 600)
    height: Math.min(parent.height * 0.85, 500)
    modal: true
    focus: true
    closePolicy: Popup.CloseOnEscape | Popup.CloseOnPressOutsideParent

    // --- –°–≤–æ–π—Å—Ç–≤–∞ ---
    property string categoryFilter: "" // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è)
    property int selectedAlgorithmId: -1
    property string selectedAlgorithmName: ""
    property var availableAlgorithms: [] // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    property var availableOfficers: []   // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü
    // --- ---

    // --- –°–∏–≥–Ω–∞–ª—ã ---
    signal algorithmStarted(var algorithmExecutionData) // –°–∏–≥–Ω–∞–ª –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    // --- ---

    background: Rectangle {
        color: "white"
        border.color: "lightgray"
        radius: 5
    }

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 15
        spacing: 15

        Label {
            text: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º"
            font.pointSize: 14
            font.bold: true
        }

        ScrollView {
            Layout.fillWidth: true
            Layout.fillHeight: true
            clip: true
            
            GridLayout {
                columns: 2
                columnSpacing: 10
                rowSpacing: 15
                width: parent.width

                Label {
                    text: "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º:*"
                    Layout.alignment: Qt.AlignRight
                }
                ComboBox {
                    id: algorithmComboBox
                    Layout.fillWidth: true
                    model: ListModel {
                        id: algorithmsModel
                    }
                    textRole: "name"
                    onCurrentIndexChanged: {
                        if (currentIndex !== -1 && model.get(currentIndex)) {
                            startNewAlgorithmDialog.selectedAlgorithmId = model.get(currentIndex).id;
                            startNewAlgorithmDialog.selectedAlgorithmName = model.get(currentIndex).name;
                        } else {
                            startNewAlgorithmDialog.selectedAlgorithmId = -1;
                            startNewAlgorithmDialog.selectedAlgorithmName = "";
                        }
                    }
                }

                Label {
                    text: "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:*"
                    Layout.alignment: Qt.AlignRight
                }
                // --- –ù–û–í–û–ï: –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã) ---
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 5
                    
                    // –ü–æ–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Å–æ–≤
                    ColumnLayout {
                        spacing: 2
                        TextField {
                            id: startHoursField
                            Layout.fillWidth: true
                            placeholderText: "–ß–∞—Å—ã (00-23)"
                            text: "00"
                            validator: IntValidator { bottom: 0; top: 23 }
                        }
                        RowLayout {
                            spacing: 1
                            Button {
                                text: "‚ñ≤"
                                font.pixelSize: 8
                                Layout.preferredWidth: 15
                                Layout.preferredHeight: 12
                                onClicked: incrementTimeComponent(startHoursField, "hours", 1);
                            }
                            Button {
                                text: "‚ñº"
                                font.pixelSize: 8
                                Layout.preferredWidth: 15
                                Layout.preferredHeight: 12
                                onClicked: incrementTimeComponent(startHoursField, "hours", -1);
                            }
                        }
                    }
                    
                    Text { text: ":" } // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

                    // –ü–æ–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∏–Ω—É—Ç
                    ColumnLayout {
                        spacing: 2
                        TextField {
                            id: startMinutesField
                            Layout.fillWidth: true
                            placeholderText: "–ú–∏–Ω—É—Ç—ã (00-59)"
                            text: "00"
                            validator: IntValidator { bottom: 0; top: 59 }
                        }
                        RowLayout {
                            spacing: 1
                            Button {
                                text: "‚ñ≤"
                                font.pixelSize: 8
                                Layout.preferredWidth: 15
                                Layout.preferredHeight: 12
                                onClicked: incrementTimeComponent(startMinutesField, "minutes", 1);
                            }
                            Button {
                                text: "‚ñº"
                                font.pixelSize: 8
                                Layout.preferredWidth: 15
                                Layout.preferredHeight: 12
                                onClicked: incrementTimeComponent(startMinutesField, "minutes", -1);
                            }
                        }
                    }
                    
                    Text { text: ":" } // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

                    // –ü–æ–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ–∫—É–Ω–¥
                    ColumnLayout {
                        spacing: 2
                        TextField {
                            id: startSecondsField
                            Layout.fillWidth: true
                            placeholderText: "–°–µ–∫—É–Ω–¥—ã (00-59)"
                            text: "00"
                            validator: IntValidator { bottom: 0; top: 59 }
                        }
                        RowLayout {
                            spacing: 1
                            Button {
                                text: "‚ñ≤"
                                font.pixelSize: 8
                                Layout.preferredWidth: 15
                                Layout.preferredHeight: 12
                                onClicked: incrementTimeComponent(startSecondsField, "seconds", 1);
                            }
                            Button {
                                text: "‚ñº"
                                font.pixelSize: 8
                                Layout.preferredWidth: 15
                                Layout.preferredHeight: 12
                                onClicked: incrementTimeComponent(startSecondsField, "seconds", -1);
                            }
                        }
                    }
                }
                // --- ---

                Label {
                    text: "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:*"
                    Layout.alignment: Qt.AlignRight
                }
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º RowLayout –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –∫–Ω–æ–ø–æ–∫
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 5
                    
                    TextField {
                        id: startDateField
                        Layout.fillWidth: true
                        placeholderText: "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)..."
                        // text –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ resetForAdd
                        // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω validator
                        // validator: RegExpValidator { regExp: /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[012])\.(19|20)\d\d$/ } // –§–æ—Ä–º–∞—Ç DD.MM.YYYY
                    }
                    
                    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                    Button {
                        text: "üìÖ"
                        font.pixelSize: 16
                        Layout.preferredWidth: 40
                        onClicked: {
                            // TODO: –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
                            console.log("QML StartNewAlgorithmDialog: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞");
                            // showInfoMessage("–í—ã–±–æ—Ä –¥–∞—Ç—ã (TODO): " + startDateField.text); // –£–î–ê–õ–Å–ù
                            console.log("QML StartNewAlgorithmDialog: –í—ã–±–æ—Ä –¥–∞—Ç—ã (TODO): " + startDateField.text);
                        }
                    }
                }

                Label {
                    text: "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:*"
                    Layout.alignment: Qt.AlignRight
                }
                ComboBox {
                    id: officerComboBox
                    Layout.fillWidth: true
                    model: ListModel {
                        id: officersModel
                    }
                    textRole: "display_name" // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ 'display_name'
                }

                // --- –ù–û–í–û–ï: –ü–æ–ª–µ –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º ---
                Label {
                    text: "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:"
                    Layout.alignment: Qt.AlignRight | Qt.AlignTop
                }
                TextArea {
                    id: notesArea
                    Layout.fillWidth: true
                    Layout.minimumHeight: 80
                    placeholderText: "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–ø—É—Å–∫—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞..."
                    wrapMode: TextArea.Wrap
                    // --- –£–õ–£–ß–®–ï–ù–ù–û–ï –û–§–û–†–ú–õ–ï–ù–ò–ï ---
                    background: Rectangle {
                        border.color: notesArea.activeFocus ? "#3498db" : "#ccc" // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ (—Å–∏–Ω–∏–π) –∏ –±–µ–∑ (—Å–µ—Ä—ã–π)
                        border.width: 1 // –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö
                        radius: 2 // –ù–µ–±–æ–ª—å—à–æ–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                        color: "white" // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
                    }
                    // --- ---
                }
                // --- ---
            }
        }

        // –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        Label {
            id: errorMessageLabel
            Layout.fillWidth: true
            color: "red"
            wrapMode: Text.WordWrap
            visible: text !== ""
        }

        // –ö–Ω–æ–ø–∫–∏
        RowLayout {
            Layout.fillWidth: true
            spacing: 10
            Item {
                Layout.fillWidth: true
            }
            Button {
                text: "–û—Ç–º–µ–Ω–∞"
                onClicked: {
                    console.log("QML StartNewAlgorithmDialog: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞");
                    startNewAlgorithmDialog.close();
                }
            }
            Button {
                text: "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
                onClicked: {
                    console.log("QML StartNewAlgorithmDialog: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å");
                    errorMessageLabel.text = "";

                    // –í–∞–ª–∏–¥–∞—Ü–∏—è
                    if (startNewAlgorithmDialog.selectedAlgorithmId <= 0) {
                        errorMessageLabel.text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º.";
                        return;
                    }
                    // --- –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò ---
                    var hours = parseInt(startHoursField.text, 10);
                    var minutes = parseInt(startMinutesField.text, 10);
                    var seconds = parseInt(startSecondsField.text, 10);
                    
                    if (isNaN(hours) || hours < 0 || hours > 23 ||
                        isNaN(minutes) || minutes < 0 || minutes > 59 ||
                        isNaN(seconds) || seconds < 0 || seconds > 59) {
                        errorMessageLabel.text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã.";
                        return;
                    }
                    // --- ---
                    if (!startDateField.text.trim()) {
                        errorMessageLabel.text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞.";
                        return;
                    }
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ validator –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
                    var dateRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[012])\.(19|20)\d\d$/;
                    if (!dateRegex.test(startDateField.text.trim())) {
                        errorMessageLabel.text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.";
                        return;
                    }
                    if (officerComboBox.currentIndex === -1 || !officerComboBox.model.get(officerComboBox.currentIndex)) {
                        errorMessageLabel.text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.";
                        return;
                    }

                    // --- –°–û–ë–ò–†–ê–ï–ú –í–†–ï–ú–Ø ---
                    var timeString = String(hours).padStart(2, '0') + ":" +
                                     String(minutes).padStart(2, '0') + ":" +
                                     String(seconds).padStart(2, '0');
                    // --- ---
                    
                    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    var officerData = officerComboBox.model.get(officerComboBox.currentIndex);
                    var algorithmExecutionData = {
                        "algorithm_id": startNewAlgorithmDialog.selectedAlgorithmId,
                        "started_at": startDateField.text.trim() + " " + timeString, // –§–æ—Ä–º–∞—Ç 'DD.MM.YYYY HH:MM:SS'
                        "created_by_user_id": officerData.id,
                        "notes": notesArea.text.trim() || null // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
                    };
                    
                    console.log("QML StartNewAlgorithmDialog: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ Python:", JSON.stringify(algorithmExecutionData));

                    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ Python –¥–ª—è –∑–∞–ø—É—Å–∫–∞
                    var result = appData.startAlgorithmExecution(algorithmExecutionData);
                    
                    if (result === true || (typeof result === 'number' && result > 0)) {
                        console.log("QML StartNewAlgorithmDialog: –ê–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç:", result);
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
                        startNewAlgorithmDialog.algorithmStarted({
                            "execution_id": typeof result === 'number' ? result : -1, // ID –Ω–æ–≤–æ–≥–æ execution'–∞, –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è ID
                            "algorithm_id": startNewAlgorithmDialog.selectedAlgorithmId,
                            "started_at": algorithmExecutionData.started_at,
                            "created_by_user_id": officerData.id,
                            "notes": algorithmExecutionData.notes
                        });
                        startNewAlgorithmDialog.close();
                    } else {
                        var errorMsg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                        if (typeof result === 'string') {
                            errorMsg = result;
                        } else if (result === false) {
                            errorMsg = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.";
                        } else if (result === -1) {
                            errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.";
                        }
                        errorMessageLabel.text = "–û—à–∏–±–∫–∞: " + errorMsg;
                        console.warn("QML StartNewAlgorithmDialog: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:", errorMsg);
                    }
                }
            }
        }
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     */
    function resetForAdd() {
        console.log("QML StartNewAlgorithmDialog: –°–±—Ä–æ—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞");
        selectedAlgorithmId = -1;
        selectedAlgorithmName = "";
        algorithmComboBox.currentIndex = -1;
        officerComboBox.currentIndex = -1;
        notesArea.text = "";
        errorMessageLabel.text = "";
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        var now = new Date();
        var year = now.getFullYear();
        var month = String(now.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü—ã —Å 0
        var day = String(now.getDate()).padStart(2, '0');
        var hours = String(now.getHours()).padStart(2, '0');
        var minutes = String(now.getMinutes()).padStart(2, '0');
        var seconds = String(now.getSeconds()).padStart(2, '0');
        
        startDateField.text = day + "." + month + "." + year;
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
        startHoursField.text = hours;
        startMinutesField.text = minutes;
        startSecondsField.text = seconds;
        
        console.log("QML StartNewAlgorithmDialog: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –¥–∞—Ç–∞ =", startDateField.text, ", –≤—Ä–µ–º—è = ", hours, ":", minutes, ":", seconds);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
        loadAlgorithmsByCategory();
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü
        loadOfficers();
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ
        selectCurrentDutyOfficer();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏–∑ Python, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ categoryFilter
     */
    function loadAlgorithmsByCategory() {
        console.log("QML StartNewAlgorithmDialog: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", categoryFilter, "—É Python...");
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        var allAlgorithmsList = appData.getAllAlgorithmsList(); 
        console.log("QML StartNewAlgorithmDialog: –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏–∑ Python (—Å—ã—Ä–æ–π):", JSON.stringify(allAlgorithmsList).substring(0, 500));

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ QJSValue/QVariant –≤ –º–∞—Å—Å–∏–≤ JS
        if (allAlgorithmsList && typeof allAlgorithmsList === 'object' && allAlgorithmsList.hasOwnProperty('toVariant')) {
            allAlgorithmsList = allAlgorithmsList.toVariant();
            console.log("QML StartNewAlgorithmDialog: QJSValue (allAlgorithmsList) –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤:", JSON.stringify(allAlgorithmsList).substring(0, 500));
        }

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        algorithmsModel.clear();
        console.log("QML StartNewAlgorithmDialog: –ú–æ–¥–µ–ª—å ComboBox –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ—á–∏—â–µ–Ω–∞.");

        // --- –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å" ---
        if (allAlgorithmsList && typeof allAlgorithmsList === 'object' && allAlgorithmsList.length !== undefined) {
        // --- ---
            var count = allAlgorithmsList.length;
            console.log("QML StartNewAlgorithmDialog: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω—ã–º. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", count);
            
            for (var i = 0; i < count; i++) {
                var alg = allAlgorithmsList[i];
                console.log("QML StartNewAlgorithmDialog: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º", i, ":", JSON.stringify(alg).substring(0, 200));
                
                // --- –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò ---
                if (typeof alg === 'object' && alg !== null && alg.category === categoryFilter) {
                // --- ---
                    try {
                        algorithmsModel.append({
                            "id": alg["id"],
                            "name": alg["name"] || "",
                            "category": alg["category"] || "",
                            "time_type": alg["time_type"] || "",
                            "description": alg["description"] || ""
                        });
                        console.log("QML StartNewAlgorithmDialog: –ê–ª–≥–æ—Ä–∏—Ç–º", i, "(ID:", alg.id, ") –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ–ª—å (–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç).");
                    } catch (e) {
                        console.error("QML StartNewAlgorithmDialog: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞", i, "–≤ –º–æ–¥–µ–ª—å:", e.toString(), "–î–∞–Ω–Ω—ã–µ:", JSON.stringify(alg));
                    }
                } else {
                     // –ï—Å–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–µ –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                     if (typeof alg === 'object' && alg !== null) {
                         console.log("QML StartNewAlgorithmDialog: –ê–ª–≥–æ—Ä–∏—Ç–º", i, "(ID:", alg.id, ") –ø—Ä–æ–ø—É—â–µ–Ω (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç).");
                     } else {
                         console.log("QML StartNewAlgorithmDialog: –ê–ª–≥–æ—Ä–∏—Ç–º", i, "–ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º).");
                     }
                }
            }
        } else {
            console.error("QML StartNewAlgorithmDialog: Python –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤. –ü–æ–ª—É—á–µ–Ω —Ç–∏–ø:", typeof allAlgorithmsList, "–ó–Ω–∞—á–µ–Ω–∏–µ:", allAlgorithmsList);
        }
        console.log("QML StartNewAlgorithmDialog: –ú–æ–¥–µ–ª—å ComboBox –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏) –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –≠–ª–µ–º–µ–Ω—Ç–æ–≤:", algorithmsModel.count);
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü –∏–∑ Python
     */
    function loadOfficers() {
        console.log("QML StartNewAlgorithmDialog: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü —É Python...");
        var officersList = appData.getAllDutyOfficersList(); // <-- –ù–û–í–û–ï: –í—Å–µ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
        console.log("QML StartNewAlgorithmDialog: –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü –∏–∑ Python (—Å—ã—Ä–æ–π):", JSON.stringify(officersList).substring(0, 500));

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ QJSValue/QVariant –≤ –º–∞—Å—Å–∏–≤ JS
        if (officersList && typeof officersList === 'object' && officersList.hasOwnProperty('toVariant')) {
            officersList = officersList.toVariant();
            console.log("QML StartNewAlgorithmDialog: QJSValue (officersList) –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤:", JSON.stringify(officersList).substring(0, 500));
        }

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        officersModel.clear();
        console.log("QML StartNewAlgorithmDialog: –ú–æ–¥–µ–ª—å ComboBox –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü –æ—á–∏—â–µ–Ω–∞.");

        // --- –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å" ---
        if (officersList && typeof officersList === 'object' && officersList.length !== undefined) {
        // --- ---
            var count = officersList.length;
            console.log("QML StartNewAlgorithmDialog: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω—ã–º. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", count);
            
            for (var i = 0; i < count; i++) {
                var officer = officersList[i];
                console.log("QML StartNewAlgorithmDialog: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ", i, ":", JSON.stringify(officer).substring(0, 200));
                
                if (typeof officer === 'object' && officer !== null) {
                    try {
                        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è: –ó–≤–∞–Ω–∏–µ –§–∞–º–∏–ª–∏—è –ò.–û.
                        var displayName = (officer["rank"] || "") + " " +
                                          (officer["last_name"] || "") + " " +
                                          (officer["first_name"] ? officer["first_name"].charAt(0) + "." : "") +
                                          (officer["middle_name"] ? officer["middle_name"].charAt(0) + "." : "");
                        
                        officersModel.append({
                            "id": officer["id"],
                            "rank": officer["rank"] || "",
                            "last_name": officer["last_name"] || "",
                            "first_name": officer["first_name"] || "",
                            "middle_name": officer["middle_name"] || "",
                            "phone": officer["phone"] || "",
                            "is_active": officer["is_active"] || 0,
                            "is_admin": officer["is_admin"] || 0,
                            "login": officer["login"] || "",
                            "display_name": displayName // <-- –ù–û–í–û–ï: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
                        });
                        console.log("QML StartNewAlgorithmDialog: –î–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ", i, "–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–æ–¥–µ–ª—å —Å display_name:", displayName);
                    } catch (e) {
                        console.error("QML StartNewAlgorithmDialog: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞", i, "–≤ –º–æ–¥–µ–ª—å:", e.toString(), "–î–∞–Ω–Ω—ã–µ:", JSON.stringify(officer));
                    }
                } else {
                    console.warn("QML StartNewAlgorithmDialog: –î–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ", i, "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º:", typeof officer, officer);
                }
            }
        } else {
             console.error("QML StartNewAlgorithmDialog: Python –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤–æ–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü. –ü–æ–ª—É—á–µ–Ω —Ç–∏–ø:", typeof officersList, "–ó–Ω–∞—á–µ–Ω–∏–µ:", officersList);
        }
        console.log("QML StartNewAlgorithmDialog: –ú–æ–¥–µ–ª—å ComboBox –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –≠–ª–µ–º–µ–Ω—Ç–æ–≤:", officersModel.count);
    }

    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –≤ ComboBox —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ, —á—å—ë –∏–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ appData.dutyOfficer
     */
    function selectCurrentDutyOfficer() {
        console.log("QML StartNewAlgorithmDialog: –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ:", appData.dutyOfficer);
        
        var currentDutyOfficerDisplay = appData.dutyOfficer; // –≠—Ç–æ "–§–∞–º–∏–ª–∏—è –ò.–û." –∏–∑ ApplicationData
        
        if (!currentDutyOfficerDisplay) {
            console.log("QML StartNewAlgorithmDialog: appData.dutyOfficer –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å.");
            return;
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–æ–¥–µ–ª–∏ officersModel –∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ display_name
        for (var i = 0; i < officersModel.count; i++) {
            var officerItem = officersModel.get(i);
            if (officerItem && officerItem.display_name === currentDutyOfficerDisplay) {
                officerComboBox.currentIndex = i;
                console.log("QML StartNewAlgorithmDialog: –¢–µ–∫—É—â–∏–π –¥–µ–∂—É—Ä–Ω—ã–π", currentDutyOfficerDisplay, "–≤—ã–±—Ä–∞–Ω –≤ ComboBox (–∏–Ω–¥–µ–∫—Å", i, ").");
                return; // –ù–∞—à–ª–∏, –≤—ã—Ö–æ–¥–∏–º
            }
        }
        
        console.log("QML StartNewAlgorithmDialog: –¢–µ–∫—É—â–∏–π –¥–µ–∂—É—Ä–Ω—ã–π", currentDutyOfficerDisplay, "–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –ª–∏—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞. –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –≤—ã–±–æ—Ä–∞.");
    }


    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞/–¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
     * @param {TextField} textField - –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã)
     * @param {string} component - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: "hours", "minutes", "seconds"
     * @param {number} delta - –®–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è (+1 –∏–ª–∏ -1)
     */
    function incrementTimeComponent(textField, component, delta) {
        console.log("QML StartNewAlgorithmDialog: incrementTimeComponent called with", textField, component, delta);
        var text = textField.text || "00";
        console.log("QML StartNewAlgorithmDialog: Current text:", text);
        
        var value = parseInt(text, 10) || 0;
        console.log("QML StartNewAlgorithmDialog: Parsed value:", value);
        
        switch(component) {
            case "hours":
                value += delta;
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-23
                value = (value + 24) % 24; // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
                break;
            case "minutes":
                value += delta;
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–Ω—É—Ç
                while (value >= 60) {
                    value -= 60;
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–Ω—É—Ç
                    incrementTimeComponent(startHoursField, "hours", 1);
                }
                while (value < 0) {
                    value += 60;
                    // –£–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–Ω—É—Ç
                    incrementTimeComponent(startHoursField, "hours", -1);
                }
                value = Math.max(0, Math.min(59, value)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-59
                break;
            case "seconds":
                value += delta;
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–∫—É–Ω–¥
                while (value >= 60) {
                    value -= 60;
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–µ–∫—É–Ω–¥
                    incrementTimeComponent(startMinutesField, "minutes", 1);
                }
                while (value < 0) {
                    value += 60;
                    // –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–µ–∫—É–Ω–¥
                    incrementTimeComponent(startMinutesField, "minutes", -1);
                }
                value = Math.max(0, Math.min(59, value)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-59
                break;
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É HH, MM, SS
        var newText = value.toString().padStart(2, '0');
        
        console.log("QML StartNewAlgorithmDialog: New text:", newText);
        textField.text = newText;
    }

    onOpened: {
        console.log("QML StartNewAlgorithmDialog: –î–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç.");
        resetForAdd(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–∂—É—Ä–Ω–æ–≥–æ
        errorMessageLabel.text = ""; // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    }
}